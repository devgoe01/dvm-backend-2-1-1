#services:
#  db:
#    image: postgres:16
#    container_name: postgres-db
#    restart: always
#    env_file:
#      - ./.env.prod 
#    ports:
#      - "5432:5432"
#    volumes:
#      - pgdata:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
#      interval: 5s
#      timeout: 5s
#      retries: 5
#
#  django-web:
#    build: .
#    container_name: docker-bookbus-container
#    volumes:
#      - ./static:/app/staticfiles:rw
#    environment:
#      DB_HOST: db
#      DB_PORT: 5432
#      STATIC_ROOT: /app/staticfiles
#    env_file:
#      - .env.prod
#    ports:
#      - "8000:8000"
#    depends_on:
#      db:
#        condition: service_healthy
#
#  frontend-proxy:
#    image: nginx:latest
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./static:/app/staticfiles
#      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#      - /etc/letsencrypt:/etc/letsencrypt
#    depends_on:
#      - django-web
#      
#volumes:
#  pgdata:
#

services:
  web:
    build:
      context: .
    command: gunicorn bus_service.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 2 --timeout 120
    env_file:
      - ./.env.prod 
    depends_on:
      - db
    ports:
      - "8000:8000"
    volumes:
      - static:/bus_service/static
      - media:/bus_service/media
    networks:
      - bus_network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
    networks:
      - bus_network

  nginx:
    build: ./nginx
    ports:
      - "1337:80" 
    depends_on:
      - web 
    volumes:
      - ./static:/bus_service/static/
      - ./media:/bus_service/media/
    networks:
      - bus_network

volumes:
  static:
  media:
  postgres_data:
networks:
  bus_network:
    driver: bridge